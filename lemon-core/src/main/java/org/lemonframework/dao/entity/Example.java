package org.lemonframework.dao.entity;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * 通用查询条件实体.
 *
 * @author jiawei zhang
 * @since 0.0.1
 */
public class Example implements Serializable {
    /**
     * 序列号.
     */
    private static final long serialVersionUID = -3708295920344686921L;

    protected String orderByClause;

    protected boolean distinct;

    protected List<Criteria> oredCriteria;

    /**
     * 构造.
     * @return
     */
    public Example() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * @param orderByClause orderByClause
     * @return
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * @return String
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * @param distinct distinct
     * @return
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * @return boolean
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * @return List<Criteria>
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * @param criteria criteria
     * @return
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * @return Criteria
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * @return Criteria
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * @return Criteria
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * @return
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    public static class Criteria extends GeneratedCriteria implements Serializable {

        protected Criteria() {
            super();
        }
    }

    protected abstract static class GeneratedCriteria implements Serializable {
        protected List<Criterion> criteria;

        private String fieldName;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIsNull() {
            addCriterion(fieldName + " is null");
            return (Criteria) this;
        }

        public Criteria andIsNotNull() {
            addCriterion(fieldName + " is not null");
            return (Criteria) this;
        }

        public Criteria andEqualTo(Long value) {
            addCriterion(fieldName + " =", value, "id");
            return (Criteria) this;
        }

        public Criteria andNotEqualTo(Long value) {
            addCriterion(fieldName + " <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andGreaterThan(Long value) {
            addCriterion(fieldName + " >", value, fieldName);
            return (Criteria) this;
        }

        public Criteria andGreaterThanOrEqualTo(Long value) {
            addCriterion(fieldName + " >=", value, fieldName);
            return (Criteria) this;
        }

        public Criteria andLessThan(Long value) {
            addCriterion(fieldName + " <", value, fieldName);
            return (Criteria) this;
        }

        public Criteria andLessThanOrEqualTo(Long value) {
            addCriterion(fieldName + " <=", value, fieldName);
            return (Criteria) this;
        }

        public Criteria andIn(List<Long> values) {
            addCriterion(fieldName + " in", values, fieldName);
            return (Criteria) this;
        }

        public Criteria andNotIn(List<Long> values) {
            addCriterion(fieldName + " not in", values, fieldName);
            return (Criteria) this;
        }

        public Criteria andBetween(Long value1, Long value2) {
            addCriterion(fieldName + " between", value1, value2, fieldName);
            return (Criteria) this;
        }

        public Criteria andNotBetween(Long value1, Long value2) {
            addCriterion(fieldName + " not between", value1, value2, fieldName);
            return (Criteria) this;
        }

        public Criteria start(String fieldName) {
            return this.start(fieldName, null);
        }

        public Criteria start(String fieldName, String aliasTableName) {
            if (aliasTableName != null) {
                this.fieldName = aliasTableName + "." + fieldName;
            } else {
                this.fieldName = fieldName;
            }

            return (Criteria) this;
        }

        public Criteria end() {
            this.fieldName = null;
            return (Criteria) this;
        }
    }

    public static class Criterion implements Serializable {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}
